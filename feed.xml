<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://www.gerovlabs.com/feed.xml" rel="self" type="application/atom+xml"/><link href="https://www.gerovlabs.com/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-09-30T07:21:18+00:00</updated><id>https://www.gerovlabs.com/feed.xml</id><title type="html">GerovLabs</title><subtitle>GerovLabs is a Custom software development, technical leadership and consulting company. </subtitle><entry><title type="html">Deploying a fine-tuned classifier</title><link href="https://www.gerovlabs.com/blog/fastai-finetuning-a-classifier/" rel="alternate" type="text/html" title="Deploying a fine-tuned classifier"/><published>2024-09-29T00:00:00+00:00</published><updated>2024-09-29T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/fastai-finetuning-a-classifier</id><content type="html" xml:base="https://www.gerovlabs.com/blog/fastai-finetuning-a-classifier/"><![CDATA[<p>Two chapters into the <a href="https://course.fast.ai/">fast.ai course</a> and we are already equipped to deploy a fine-tuned classifier that operates on a close-to-human level task without too much data nor expensive hardware (actually free)!</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/lotr-races-2-480.webp 480w,/assets/img/lotr-races-2-800.webp 800w,/assets/img/lotr-races-2-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/lotr-races-2.png" class="img-fluid rounded z-depth-1 w-md-50 float-md-right ml-md-2" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>As a pet project I ended up building <strong><a href="https://gerovlabs.com/ai-models/">a LOTR race classifier</a></strong>. It achieves quite good accuracy (<strong>75%</strong> on my validation set, I felt it did even better during QA) given how much I’m relying on defaults and how little (and dirty) the custom input dataset is.</p> <p>The process starts with data gathering (using <a href="https://serpapi.com/duckduckgo-search-api">DDG API</a> and some helpers from fast.ai) with ~100 images of each LOTR race. Afterwards a <a href="https://pytorch.org/vision/main/models/generated/torchvision.models.resnet18.html">resnet18</a> model is fine-tuned so that we can check the images that perform the worst and use them to clean up the data further. Once we are happy with the dataset we re-train the model and do the transformations we see fit. Once the fine-tuned model is ready we export and deploy it to <a href="https://huggingface.co/spaces">HG Spaces</a>. Afterwards we went for a custom solution so we could see how an E2E deployment would look like.</p> <pre><code class="language-typograms">+-------------+    +-------+    +------------+    +--------+ 
| Gather data |---&gt;| Train |---&gt;| Clean data |---&gt;| Deploy |
+-------------+    +-------+    +------------+    +--------+ 
                        ^            |
                        +------------+
                           re-train
</code></pre> <h3 id="data">Data</h3> <p>I’ve had data scientist colleagues mention to me how much of their time went into getting clean data (or structuring corporate data, <a href="https://www.forbes.com/sites/gilpress/2016/03/23/data-preparation-most-time-consuming-least-enjoyable-data-science-task-survey-says/">up to 80%</a>). I’m not working on a production system and still found it tricky to get good-enough data even for my small experiment.</p> <p>A simplified version of how I gathered the data looks like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">race_characters</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">Ainur</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">Gandalf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Saruman</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Sauron</span><span class="sh">'</span><span class="p">],</span> <span class="c1"># etc..
</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">fetch_images_for_race</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">race</span><span class="p">,</span> <span class="n">characters</span> <span class="ow">in</span> <span class="n">race_characters</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">./</span><span class="si">{</span><span class="n">race</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">for</span> <span class="n">character</span> <span class="ow">in</span> <span class="n">characters</span><span class="p">:</span>
            <span class="n">results</span> <span class="o">=</span> <span class="nc">DDGS</span><span class="p">().</span><span class="nf">images</span><span class="p">(</span>
                <span class="n">keywords</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">character</span><span class="si">}</span><span class="s"> lotr movie face</span><span class="sh">"</span> <span class="k">if</span> <span class="n">race</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">no-middle-earth</span><span class="sh">'</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">character</span><span class="si">}</span><span class="s"> face</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">type_image</span><span class="o">=</span><span class="sh">"</span><span class="s">photo</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">max_results</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="nf">download_images</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">urls</span><span class="o">=</span><span class="n">results</span><span class="p">)</span> <span class="c1"># this is a fast.ai utility function
</span></code></pre></div></div> <h3 id="first-model">First model</h3> <p>Training and cleaning the dataset is well covered in <a href="https://course.fast.ai/Lessons/lesson2.html">the second chapter</a> of the fast.ai course although I’ll share some issues encountered on the way:</p> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/after-cleaning-480.webp 480w,/assets/img/after-cleaning-800.webp 800w,/assets/img/after-cleaning-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/after-cleaning.png" class="img-fluid rounded float-right mx-2 w-50" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <ul> <li><code class="language-plaintext highlighter-rouge">Duplicate images</code>: I realised quite a few of the images I was downloading were duplicates</li> <li><code class="language-plaintext highlighter-rouge">Using a non-structured dataset</code>: searching the web for images implies a huge bias on what kind of results you would get and how accurate it is. I had to adjust my queries multiple times until I liked enough the shape of the data.</li> <li><code class="language-plaintext highlighter-rouge">Cleaning data</code>: fast.ai provides a very limited utility to clean-up your training/validation image datasets. It’s not optimised for quick cleanup and is lacking essential features to enable a quicker process. I feel that at this stage looking manually at the pictures and/or relying on other automated software would have been quicker.</li> <li><code class="language-plaintext highlighter-rouge">Remote environment</code>: using <a href="https://kaggle.com/">Kaggle</a> is a huge enabler for me since my Mac doesn’t come with a GPU but I find it more comfortable to run most of my code locally and only rely on it when I get to using the GPU. That becomes a problem when some operations (like cleaning up the data) depend on previously training your model.</li> <li><code class="language-plaintext highlighter-rouge">Kaggle notebook</code>: fast.ai chapters notebooks were done a while ago and some packages like DDG have evolved and the actual Kaggle environment has changed so there was some manual intervention needed in the actual code or setup. That’s OK for tech-savvy people but could be a blocker for people with less ops experience.</li> <li><code class="language-plaintext highlighter-rouge">Deployment</code>: deploying to <a href="https://huggingface.co/spaces/sgerov/lotr-races">a personal Space in Hugging Face</a> worked as well but I also had to adjust the Gradio sample code I read. Same happened for some configurations I had to add for HG deployments to work.</li> </ul> <h3 id="custom-solution">Custom solution</h3> <p>The <a href="https://huggingface.co/spaces/sgerov/lotr-races">Gradio &amp; Hugging Face Space</a> deployment worked well but I wanted to have a custom deployment to get an E2E feeling of a simple release.</p> <p>I already had a working <a href="https://jekyllrb.com/">Jekyll</a> deployment (this site) so I decided to include a <a href="https://react.dev/">React</a> application inside where I could communicate with a Backend for inference.</p> <p>I started trying to integrate the HF Space JS client into React but sadly <a href="https://github.com/gradio-app/gradio/issues/7693">it didn’t work</a>. The prediction code would be as simple as:</p> <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">response</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">fetch</span><span class="p">(</span><span class="dl">"</span><span class="s2">https://raw.githubusercontent.com/gradio-app/gradio/main/test/test_files/bus.png</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">exampleImage</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">response</span><span class="p">.</span><span class="nf">blob</span><span class="p">();</span>
						
<span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Client</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="dl">"</span><span class="s2">sgerov/lotr-races</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">client</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="dl">"</span><span class="s2">/predict</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span> 
				<span class="na">img</span><span class="p">:</span> <span class="nx">exampleImage</span><span class="p">,</span> 
<span class="p">});</span>
</code></pre></div></div> <p>Next I went for <a href="https://www.gradio.app/guides/querying-gradio-apps-with-curl">the manual endpoint integration</a> but I wasn’t getting the right events from the <code class="language-plaintext highlighter-rouge">$URL/call/$API_NAME/$EVENT_ID</code> regardless of how I formatted the request.</p> <p>This is the point where I decided to go for a custom solution which is something I wanted to try out anyway. I went for the least resistance path that came to mind which was to rely on a very slim <a href="https://www.djangoproject.com/">Django app</a> that relies on <a href="https://docs.fast.ai/">fast.ai library</a> for inferences:</p> <pre><code class="language-typograms"> +--------+ html .---------. base64 image  +------------+    
 |        |-----&gt;|         |--------------&gt;| Django App |
 | Jekyll |      | Browser |&lt;--------------| .--------. |
 +--------+      +---------+    prediction | |fast.ai | |
     ^          / /       \ \              | .--------. |
     |         '-------------'             +------------+
     |JS                                         ^
     |                                           |model.pkl
+-----------+                            +-----------------+              
| React APP |                            | Kaggle training |               
+-----------+                            +-----------------+
</code></pre> <p>A great side-effect of a custom solution is that it was rather trivial to make a mobile-friendly version of the app which might enable some interesting model experiments later on.</p> <p>The Django endpoint, aside of the glueing code given by the framework is almost as simple as:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="nf">load_learner</span><span class="p">(</span><span class="sh">'</span><span class="s">model.pkl</span><span class="sh">'</span><span class="p">)</span>
<span class="n">image_base64</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">)</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">PILImage</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">file_from_image_base64</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

<span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">outputs</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>

<span class="n">result</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">predictions</span><span class="sh">'</span><span class="p">:</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">dls</span><span class="p">.</span><span class="n">vocab</span><span class="p">,</span> <span class="nf">map</span><span class="p">(</span><span class="nb">float</span><span class="p">,</span> <span class="n">outputs</span><span class="p">))),</span>
<span class="p">}</span>
<span class="k">return</span> <span class="nc">JsonResponse</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
</code></pre></div></div> <h3 id="next-steps">Next steps</h3> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/lotr-races-1-480.webp 480w,/assets/img/lotr-races-1-800.webp 800w,/assets/img/lotr-races-1-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/lotr-races-1.png" class="img-fluid rounded z-depth-1 float-right ml-2" width="150px" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> <p>Now that there is some backbone and we got some experience deploying simple models we should be all set to experiment with fast.ai configurations, input data, different architectures and datasets while <a href="https://course.fast.ai/Lessons/lesson3.html">digging into deep learning</a>.</p> <p>Some immediately useful community contributions that come to mind are:</p> <ul> <li>Improve the <a href="https://docs.fast.ai/vision.widgets.html#imageclassifiercleaner">Image Classifier Cleaner</a> to add additional features that could speed up dramatically the data cleaning process</li> <li>Create a new widget to enable quicker feedback loops and labeling while downloading data from platforms like DDG</li> <li>Improve course notebooks (there are already open PRs handling this on fast.ai)</li> </ul> <h3 id="useful-links">Useful links</h3> <ul> <li><a href="https://gerovlabs.com/ai-models/">Custom LOTR race classifier</a></li> <li><a href="https://huggingface.co/spaces/sgerov/lotr-races">HG + Gradio deployment</a></li> <li><a href="https://www.kaggle.com/code/savagerov/training-a-model-lotr">Kaggle training notebook</a></li> <li><a href="https://github.com/sgerov/gerovlabs-models-serve">Django toy server</a></li> <li><a href="https://course.fast.ai/Lessons/lesson2.html">Second lesson of fast.ai course</a></li> <li><a href="https://www.amazon.com/Deep-Learning-Coders-fastai-PyTorch/dp/1492045527">Chapter 2 of fast.ai book</a></li> </ul>]]></content><author><name></name></author><category term="exploration"/><category term="ai"/><summary type="html"><![CDATA[Leveraging fast.ai capabilities for a quick resnet model fine-tuning and delivery.]]></summary></entry><entry><title type="html">Collaboration and communication</title><link href="https://www.gerovlabs.com/blog/collaboration-and-communication/" rel="alternate" type="text/html" title="Collaboration and communication"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/collaboration-and-communication</id><content type="html" xml:base="https://www.gerovlabs.com/blog/collaboration-and-communication/"><![CDATA[<p>Regardless of where we are in a project’s timeline, effective collaboration and communication are key not only for its success but also for <strong>managing expectations</strong> and <strong>ensuring alignment</strong> across and within teams.</p> <p>Effective collaboration and communication involves many aspects, from structured O3s (1-1s) and sharp facilitation skills, to timely escalation and generating a safe space for <strong>open dialogue</strong>. It’s about more than just talking - it’s about getting the right people involved in the right conversations, setting clear role expectations, and ensuring that everyone is on the same page.</p> <blockquote class="block-tip"> <h5 id="example">Example</h5> <p>Architectural Decision Records (ADRs) provide clarity and accountability, while proactive feedback loops and/or regular retrospectives ensure issues are surfaced and addressed early.</p> </blockquote> <p>In addition, understanding team dynamics, showing empathy, and maintaining transparency can drastically <strong>improve collaboration</strong>. By fostering <strong>psychological safety</strong>, team members are encouraged to share their ideas and concerns freely, creating a culture where everyone feels heard and respected. Trust is built not just through communication, but through actions, follow-through, and mutual accountability.</p> <p>Whether it’s refining written communication skills, <strong>ensuring clarity</strong> in decision-making, or creating a culture of <strong>continuous feedback</strong>, effective collaboration goes beyond processes! It’s about fostering strong, resilient <strong>relationships</strong> that drive the project forward.</p> <p>Fore more on effective collaboration, please check the <a href="/blog/integrity-and-transparency/">Integrity and Transparency</a> article.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[Managing expectations and ensuring alignment across and within teams.]]></summary></entry><entry><title type="html">Delivering value over process</title><link href="https://www.gerovlabs.com/blog/deliver-value/" rel="alternate" type="text/html" title="Delivering value over process"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/deliver-value</id><content type="html" xml:base="https://www.gerovlabs.com/blog/deliver-value/"><![CDATA[<p>Processes are everywhere! Scrum, Kanban, Scrumban, no-estimates, PRs - the options are endless. And while processes provide structure and discipline, the real goal of any software project should be rather simple: <strong>delivering value</strong>.</p> <p>I believe that <strong>value delivery trumps rigid adherence to process</strong>. While I respect and utilize heavily established methodologies by the industry, I understand that clients don’t hire us for the method but for the outcome.</p> <h4 id="why-value-first">Why “Value First”</h4> <p>The danger of focusing too much on process (or specific metrics) is that it can become an end in itself. Teams can find themselves bogged down by rituals, meetings, and a strict sequence of steps. Before you know it, the focus has shifted from solving the real problem to either making sure every process box is checked or metric X is green.</p> <p>Is a flawlessly executed sprint really valuable if the needs haven’t been fully addressed? Or if the product doesn’t solve the core problem?</p> <p>The philosophy is simple: <strong>processes are tools, not rules</strong>. They are there to help us, not hinder us. If we’re following a process and it’s no longer serving the project’s real goal (i.e. delivering business value) we adapt, pivot, and change course. At the end of the day, what we care about most is the outcome.</p> <blockquote class="block-tip"> <h5 id="example">Example</h5> <p>The OKRs strive for setting objectives and key results that are outcome oriented and interconnected so that teams have the freedom to explore the solution space while focusing on moving the needle.</p> </blockquote> <h4 id="solving-the-right-problems">Solving the right problems</h4> <p>Delivering value means understanding the client’s core business needs. It means <strong>prioritizing functionality that moves the needle</strong>, whether that’s improving customer experience, reducing operational costs, or creating new revenue streams.</p> <p>Let’s start with asking the right (and sometimes uncomfortable) questions:</p> <ul> <li>What is the main business challenge we’re facing?</li> <li>How will success be measured in our project? (outcome vs output)</li> <li>What’s the most critical pain point for our users?</li> </ul> <p>These questions drive our development decisions. By focusing on the ultimate objectives, we ensure that every line of code we write and every feature we deliver contributes directly to meaningful outcomes.</p> <h4 id="flexibility-is-essential">Flexibility is essential</h4> <p>One of the biggest advantages of prioritizing value over process is <strong>flexibility</strong>. We believe in using <strong>Agile principles</strong> to stay adaptable, allowing us to shift gears when necessary. If client priorities change mid-project (and they often do), we adjust the plan accordingly, without getting derailed by rigid adherence to the original process.</p> <p>In a world that changes rapidly, this ability to adapt is crucial to delivering true customer value. I don’t believe in being tied to a strict playbook, nor that it’s the intention behind the quite misused Agile term.</p> <h4 id="client-satisfaction">Client satisfaction</h4> <p>At the end of a project, success isn’t measured by how well we followed a process. It’s measured by the impact we’ve made on the business. Did we help reach the goals? Did we solve the problems? Did we make the operations smoother or customers happier?</p> <p>That’s what delivering value is all about. It’s not about hitting sprint deadlines, following every Agile ceremony or achieving outputs over outcomes. It’s about knowing that the product we’ve delivered <strong>makes a real difference</strong> to the client’s bottom line.</p> <p>So, if you’re looking for a partner who understands that <strong>the end result</strong> is what really counts, let’s talk!</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[The real goal of any software project should be rather simple - delivering value.]]></summary></entry><entry><title type="html">Ethical responsibility</title><link href="https://www.gerovlabs.com/blog/ethical-responsibility/" rel="alternate" type="text/html" title="Ethical responsibility"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/ethical-responsibility</id><content type="html" xml:base="https://www.gerovlabs.com/blog/ethical-responsibility/"><![CDATA[<p>As technologists, we have an immense amount of influence in todays’ world. The systems we design and the software we create shape industries, impact individuals, and define modern society. With this influence comes a significant responsibility: a responsibility not just to our clients or employers, but to society.</p> <p>At the heart of this responsibility is <strong>ethics</strong>. Ethical responsibility in software development is about more than writing clean code or delivering features on time. It’s about considering the broader implications of our work, ensuring that the products we build contribute positively to the world and avoid harm wherever possible.</p> <h3 id="power-and-pitfalls">Power and pitfalls</h3> <p>Software is a powerful tool. It can solve complex problems, improve efficiency, and create opportunities for innovation. But that same power can also be misused or misdirected, often unintentionally. We’ve seen countless examples of technology that was developed with good intentions but ended up causing significant harm: whether it’s biased algorithms, privacy breaches, or even systems that perpetuate inequality.</p> <blockquote class="block-tip"> <h5 id="example">Example</h5> <p><a href="https://www.theguardian.com/technology/commentisfree/2020/oct/15/cambridge-analytica-threat-democracy-facebook-big-tech">Camgridge Analytica</a> case is a good example of a product usage that started as a way to connect peers in Universities and escalated to shaping our democracies.</p> </blockquote> <p>This is why <strong>ethical reflection</strong> is essential at every stage of the software development process. When we build software, we aren’t just delivering code. We are embedding assumptions, values, and biases into systems. It’s our duty to ensure that these systems operate in a way that is <strong>fair, just, and responsible</strong>.</p> <h4 id="privacy-and-data">Privacy and data</h4> <p>One of the most critical ethical concerns in software development today is the issue of <strong>data privacy</strong>. In an age where data is the new currency, it’s tempting to collect as much information as possible. But just because we <strong>can</strong> collect data doesn’t mean we <strong>should</strong>.</p> <p>We also have a responsibility to ensure that the data we use to train models or make decisions is free from bias. <strong>Rebecca Parsons</strong> often speaks about the dangers of <strong>algorithmic bias</strong>: how seemingly neutral algorithms can perpetuate existing inequalities if they are trained on biased data. As developers, it’s our ethical responsibility to challenge these biases and ensure that the systems we create are fair and inclusive. We also need to ensure that our systems are <strong>auditable</strong> and <strong>explainable</strong>, users have the right to know how decisions that affect their lives are being made.</p> <p>As software professionals, it’s our ethical duty to recognize these risks and <strong>actively mitigate them</strong>. That means testing our systems rigorously, questioning our assumptions, and ensuring that the products we build work equally well for everyone: regardless of their race, gender, or socioeconomic background.</p> <h4 id="ethics-as-a-design-principle">Ethics as a design principle</h4> <p>One of the dangerous mindsets in development is the belief that <strong>“we’re just building the tool”</strong> and that what happens with it isn’t our responsibility. This abdication of ethical responsibility is rather short-sighted.</p> <p><strong>Ethical responsibility</strong> needs to be baked into the design process from day one. It’s not something that can be tacked on at the end, nor is it something that can be left to chance. We need to build ethics into the very fabric of our systems.</p> <p>That implies having tough conversations about the ethical implications of our decisions. It implies working with diverse teams to ensure that we’re considering multiple perspectives. It implies to be willing to slow down and reconsider our approach if we realize that what we’re building might cause harm.</p> <p>Ethical responsibility is not a burden. It’s a <strong>core principle</strong> of software development. When we take the time to build ethically, we build systems that are <strong>trustworthy, sustainable</strong>, and beneficial to society.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[The systems we design and the software we create shape industries, impact individuals, and define modern society.]]></summary></entry><entry><title type="html">Integrity and transparency</title><link href="https://www.gerovlabs.com/blog/integrity-and-transparency/" rel="alternate" type="text/html" title="Integrity and transparency"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/integrity-and-transparency</id><content type="html" xml:base="https://www.gerovlabs.com/blog/integrity-and-transparency/"><![CDATA[<p>In my years working with teams, both large and small, I’ve seen projects do better or worst and a vital factor was always at play: <strong>trust</strong>. Trust is what holds a team together, enables productive collaboration, and, ultimately, delivers successful outcomes. But trust doesn’t appear by chance! It’s earned, day by day, through the values of <strong>integrity and transparency</strong>. Let’s break that down:</p> <p>What does <strong>integrity</strong> mean in the context of software development? It means standing by your principles, doing what’s right even when it’s uncomfortable. It’s about owning up to mistakes and raising concerns early, not waiting for the cracks to become too wide to ignore.</p> <p><strong>Transparency</strong> goes hand-in-hand with integrity. It’s about ensuring that everyone on the team - whether it’s developers, stakeholders, or clients - has visibility into what’s really happening. Transparency requires openness, and more importantly, honesty.</p> <h4 id="speaking-up-timely">Speaking up timely</h4> <p>One of the biggest risks to any project is when people stay silent. A developer spots a potential problem - technical debt building up, a misaligned architectural decision, or a requirement that doesn’t seem right. But they don’t say anything. Maybe they’re afraid of causing a stir or being seen as negative. But by the time the problem comes to light, it might be too late.</p> <p>This is where <strong>a safe space</strong> is critical. It’s our responsibility to speak up when we see potential issues, and to do it <strong>early</strong>. Raising flags before they become fires may not be glamorous, but it saves time and stress. It’s better to ask uncomfortable questions now than to scramble to fix unspoken problems later. In fact, one of the best things we can do as leaders or team members is to <strong>normalize speaking up early</strong>.</p> <h4 id="the-courage-to-be-honest">The courage to be honest</h4> <p>Some of the most successful teams I’ve worked with were full of disagreements. The difference? They disagreed <strong>honestly</strong> and <strong>constructively</strong>.</p> <p>There’s a section in Brené Brown’s <em>Dare to Lead</em> that speaks to this, and it’s something I’ve found critical in software development: <strong>clear is kind</strong>. Being clear and honest with your team. Whether that’s admitting you’re unsure, explaining a risk, or acknowledging a mistake is one of the kindest and most productive things you can do!</p> <p>Honesty isn’t about pushing your opinion or being brutally blunt. It’s about presenting the facts and asking tough questions in the spirit of improving the project and ourselves. It’s about recognizing that <strong>our ego shouldn’t get in the way of transparency</strong>. Real courage comes from <strong>humility</strong>, from being willing to say, “I think I might be wrong” or “We need to reconsider this”.</p> <h4 id="transparency-builds-trust">Transparency builds trust</h4> <p>We often think of transparency in terms of communication between team members. But in my experience, <strong>transparency with stakeholders and clients</strong> is just as critical or more. Whether we’re in leadership roles or contributing as developers, we owe it to the people we work with to give an honest view of the status quo.</p> <p>Sometimes that means admitting we’re having issues. Sometimes it means admitting we don’t have a perfect solution yet. But in all cases, it means being honest about the state of the project and the challenges we face.</p> <p>Clients and stakeholders can handle bad news. What they can’t handle is being blindsided by them. If you’re open and transparent from the start - giving an accurate picture of progress, risks, and the potential roadblocks - you build <strong>trust</strong>. Even when things go wrong, that trust allows you to work together to find solutions. That’s tightly related to my understanding of how <strong>Agile principles</strong> are applied in practice.</p> <p>Humility is a strength. It shows that you’re focused on the <strong>success of the project</strong>, not on being right. When teams embrace humility, they create an environment where people are comfortable being honest. And when people are honest, the team becomes <strong>stronger, more agile, and more resilient</strong>.</p> <h4 id="integrity-as-a-competitive-advantage">Integrity as a competitive advantage</h4> <p>Some might think that this level of openness could be risky in a competitive world. But I’d argue that <strong>integrity and transparency are competitive advantages</strong>. By being upfront about risks, challenges, and solutions, you earn the trust of clients, stakeholders, and your team. That trust creates long-lasting partnerships, enables smoother project delivery, and most importantly: ensures that everyone is working together towards a common goal.</p> <p>In the end, software isn’t just about working code but about <strong>people</strong>. And the best way to work with people is with honesty, integrity, and transparency.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[By being upfront about risks, challenges, and solutions we earn the trust of clients, stakeholders, and team.]]></summary></entry><entry><title type="html">Simplicity and pragmatism</title><link href="https://www.gerovlabs.com/blog/simplicity-and-pragmatism/" rel="alternate" type="text/html" title="Simplicity and pragmatism"/><published>2024-09-13T00:00:00+00:00</published><updated>2024-09-13T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/simplicity-and-pragmatism</id><content type="html" xml:base="https://www.gerovlabs.com/blog/simplicity-and-pragmatism/"><![CDATA[<p>In software development, there’s often a tendency to overcomplicate things (worstened by <a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conways’ Law</a>). We’re constantly tempted to add more functionality, introduce more abstractions, or build complex architectures to cover every conceivable edge case. But the most effective and maintainable systems often share a common trait: <strong>simplicity</strong>.</p> <p>Simplicity is not about cutting corners or taking shortcuts. It’s about making decisions that reduce unnecessary complexity while still delivering value. In fact, simplicity is often harder to achieve than complexity. It takes discipline, experience, and a clear focus on the <strong>right</strong> problems to solve.</p> <p>At its core, <strong>simplicity is pragmatic</strong>. It’s about solving today’s problems, not tomorrow’s hypotheticals. It’s about avoiding over-engineering and focusing on what’s truly essential to deliver value. Let’s explore what that means in practice.</p> <blockquote class="block-tip"> <h5 id="example">Example</h5> <p>Premature optimisation is a classic example of overcomplicating things unnecessarily, seen commonly in grads coming from academia.</p> </blockquote> <h4 id="accidental-complexity">Accidental complexity</h4> <p>In my experience, most of the complexity in software systems is <strong>accidental</strong>, not <strong>essential</strong>. Accidental complexity comes from poor design choices, over-engineered solutions, and unnecessary abstractions (or architecture) that don’t solve the core problem but make the code harder to work with.</p> <p>As Sandi Metz often emphasizes in her work, the goal should always be to design systems that are <strong>flexible but simple</strong>. Too many devs fall into the trap of “future-proofing” our code by adding layers of abstraction to handle problems that may never arise. This results in bloated, fragile systems that are harder to maintain and extend.</p> <p>Instead, we should aim to solve the problem at hand with the <strong>simplest possible solution</strong>. Focus on clarity and readability. If the problem grows in complexity later, we can refactor. But don’t build complexity into the system before it’s necessary (wait for the last responsible moment). Simplicity forces us to focus on what’s truly important.</p> <h4 id="the-best-code-is-no-code">The best code is no code</h4> <p>One of the most effective ways to avoid complexity is to write <strong>less code</strong>. In fact, as DHH (David Heinemeier Hansson, the creator of Ruby on Rails) often promotes “best code is no code at all.” Every line of code you write is a liability: a potential source of bugs, maintenance headaches, and future complexity.</p> <p>That’s why we should always question whether new code is truly necessary. Can the problem be solved by leveraging existing libraries or frameworks? Can we use a simpler solution, like a built-in language feature or service instead of writing a custom one?</p> <p>This philosophy also aligns with the <strong>KISS</strong> (Keep It Simple, Stupid) and <strong>DRY</strong> (Don’t Repeat Yourself) principles. By avoiding unnecessary duplication and relying on well-established solutions, we can keep our codebases lean and maintainable.</p> <h4 id="embracing-pragmatism">Embracing pragmatism</h4> <p>One powerful idea that emerged particularly from <strong>Ruby on Rails</strong>, is the concept of <strong>convention over configuration</strong>. The idea is simple: by following a set of sensible defaults (conventions), you can avoid the need for endless configuration and boilerplate.</p> <p>This is pragmatism in action. Instead of reinventing the wheel every time, we lean on conventions that work well for the majority of cases (think of the 80-20 rule). This reduces the amount of code we have to write and allows us to focus on delivering business value, not wrestling with configuration and setup.</p> <p>For example, in Rails, you don’t need to specify how database columns map to object properties. Rails does it for you based on conventions (ActiveRecord over Data-Mapper/Repository pattern). This simplicity means that developers spend less time on repetitive tasks and more time solving the unique challenges of their application. Obviously there is a trade-off in regards of separation of concerns (and clean architecture) which we need to weight for with our project needs and its future growth.</p> <p>As developers, we often face the temptation to solve problems in our own unique way. But reinventing the wheel almost always leads to increased complexity and bugs. Instead, we should rely on well-established patterns and solutions whenever possible (which are most-probably battle tested in production systems already).</p> <h4 id="clarity-above-all">Clarity above all</h4> <p>One of the most important aspects of simplicity is <strong>clarity</strong>. Code that is easy to read and review is easier to maintain, extend, and debug. Code evolves, and it’s important that the people who come after us can understand and modify our code without needing to decipher a convoluted mess.</p> <p>Simple code is <strong>self-explanatory</strong>. It doesn’t rely on clever tricks, obscure syntax or comments. It follows clear conventions and avoids unnecessary complexity. When writing code, we should always prioritize <strong>clarity</strong> over cleverness. Code is read far more often than it is written, so making it easy to read and understand is crucial!</p> <blockquote class="block-tip"> <h5 id="example-1">Example</h5> <p>One of the core principles of Agile development is to deliver value incrementally and adjust as we go. By delivering in small chunks, we can get feedback early and often, making it easier to course-correct if necessary. This iterative approach keeps the codebase simple by ensuring that we’re only adding what’s absolutely necessary at each stage.</p> </blockquote> <p>At its core, simplicity is about making the <strong>pragmatic choice</strong> and focusing on delivering value, solving today’s problems, and avoiding the pitfalls of over-engineering. By embracing simplicity, we reduce accidental complexity, write less code, and focus on clarity and readability.</p> <p>I believe that simplicity isn’t just a principle - it’s a practice. And by keeping things simple, we ensure that our systems are more maintainable, more reliable, and ultimately more valuable to clients.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[The power of doing less.]]></summary></entry><entry><title type="html">Continuous learning and adaptability</title><link href="https://www.gerovlabs.com/blog/continuous-learning/" rel="alternate" type="text/html" title="Continuous learning and adaptability"/><published>2024-09-12T00:00:00+00:00</published><updated>2024-09-12T00:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/continuous-learning</id><content type="html" xml:base="https://www.gerovlabs.com/blog/continuous-learning/"><![CDATA[<p>In software engineering, things change fast. New frameworks, tools, and best practices appear/evolve constantly, and what worked a few years ago can quickly become dated. That’s why continuous learning and adaptability are essential in our field.</p> <h3 id="rapidly-evolving-tech-landscape">Rapidly evolving tech landscape</h3> <p>The tech industry is constantly changing, with new tools, frameworks, and programming languages emerging regularly. Continuous learning allows us to stay updated with the latest innovations, avoiding obsolescence and remaining competitive.</p> <div class="row justify-content-center mt-5"> <div class="col-6"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/frameworks-questions-so.webp-480.webp 480w,/assets/img/frameworks-questions-so.webp-800.webp 800w,/assets/img/frameworks-questions-so.webp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/frameworks-questions-so.webp" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Popular web frameworks trends. Taken from <a href="https://www.mdpi.com/2079-9292/12/17/3563"> Electronics journal </a> </div> <blockquote class="block-tip"> <h5 id="example">Example</h5> <p>The rise of cloud platforms like AWS, Azure, and Google Cloud required devs to learn new skills in infrastructure management and serverless architecture. Engineers who embraced continuous learning became highly sought after for cloud-based projects.</p> </blockquote> <h3 id="improved-problem-solving">Improved problem-solving</h3> <p>Through continuous learning we develop new ways of thinking and approaching problems. Exposure to diverse technologies, paradigms, and patterns broadens our ability to find innovative and efficient solutions to complex issues.</p> <blockquote class="block-tip"> <h5 id="example-1">Example</h5> <p>Developers who transitioned from object-oriented programming to functional programming (e.g., learning languages like Scala or adopting functional patterns in JavaScript) found it easier to write concise, immutable, and predictable code that’s more maintainable over time, regardless of language choice.</p> </blockquote> <h3 id="adaptation-to-industry-best-practices">Adaptation to industry best practices</h3> <p>Software engineering best practices evolve over time, influenced by new insights, research, and large-scale implementations. Engineers who continuously learn stay up-to-date with these trends, allowing them to create more robust and scalable systems.</p> <blockquote class="block-tip"> <h5 id="example-2">Example</h5> <p>The shift towards DevOps and CI/CD (Continuous Integration/Continuous Delivery) pipelines. Engineers who adapted to DevOps practices, such as infrastructure as code (IaC) with tools like Terraform (or Chef back in the days) and automation with Jenkins or GitLab CI, have been able to speed up release cycles, reduce downtime, and ensure higher reliability.</p> </blockquote> <h3 id="handling-new-security-threats">Handling new security threats</h3> <p>As technology grows, so do security vulnerabilities. Engineers who are committed to change can better handle new security threats, implementing best practices for securing systems and preventing attacks.</p> <blockquote class="block-tip"> <h5 id="example-3">Example</h5> <p>The rise of container orchestration tools like Kubernetes also led to new security concerns. Developers who learned container security practices (e.g., securing images, managing secrets) helped organizations protect their applications from attacks such as data breaches or malicious container manipulation.</p> </blockquote> <h3 id="enhanced-career-growth">Enhanced career growth</h3> <p>In a fast-moving industry, those who embrace lifelong learning and adaptability are more likely to advance in their careers, as employers value engineers who stay ahead of the curve and bring fresh, relevant knowledge into their roles.</p> <blockquote class="block-tip"> <h5 id="example-4">Example</h5> <p>Engineers who transitioned into machine learning and AI fields, acquiring new skills such as TensorFlow or PyTorch, have positioned themselves at the forefront of emerging AI-driven markets.</p> </blockquote> <h3 id="conclusion">Conclusion</h3> <p>In the fast-paced world of software engineering, continuous learning and adaptability are not just advantages, they’re necessities. The ability to quickly grasp new technologies, adopt evolving best practices, and stay ahead of security threats can define the success of both individual engineers and entire teams. By committing to ongoing growth, we position ourselves to solve more complex problems, build better systems, and thrive in a constantly shifting industry. At the end of the day, staying competitive means embracing change.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[In software engineering, things change fast and often.]]></summary></entry><entry><title type="html">Technical excellence</title><link href="https://www.gerovlabs.com/blog/technical-excellence/" rel="alternate" type="text/html" title="Technical excellence"/><published>2024-09-11T20:00:00+00:00</published><updated>2024-09-11T20:00:00+00:00</updated><id>https://www.gerovlabs.com/blog/technical-excellence</id><content type="html" xml:base="https://www.gerovlabs.com/blog/technical-excellence/"><![CDATA[<p>When it comes to software delivery, beyond validating customer value, it’s our responsibility to ensure the predictability and evolvability of the solutions we provide. The software industry, through years of refinement, has developed practices that allow for rapid, high-quality development without compromising the stability of the end product.</p> <p>Several high-level software delivery practices complement each other in achieving systems that stand the test of time:</p> <h3 id="clean-code">Clean code</h3> <p>Clean code is more than just coding standards or patterns: it’s a mindset focused on <strong>readability, simplicity, and maintainability</strong>. Code that is easy to understand and modify lowers the cost of adding new features or fixing bugs. As systems scale, the ability to make changes without introducing regressions becomes critical.</p> <blockquote class="block-tip"> <h5 id="example">Example</h5> <ul> <li><strong>Functional programming principles</strong> contribute by eliminating side effects, making code more predictable and easier to reason about.</li> <li><strong>Static typing</strong> adds a layer of safety by catching errors at compile time, reducing uncertainty and preventing runtime issues.</li> <li><strong>Modularity</strong> and <strong>composition over inheritance</strong> promote small, independent services that align with the organization’s structure. This segmentation fosters more adaptable teams and systems, enhancing agility and maintainability.</li> </ul> </blockquote> <h3 id="continuous-integrationcontinuous-delivery">Continuous integration/continuous delivery</h3> <p>CI/CD has transformed how software is developed by automating the build, test, and deployment processes, creating a <strong>rapid feedback loop</strong> that allows developers to detect and address issues early. This accelerates development while maintaining high-quality standards.</p> <blockquote class="block-tip"> <h5 id="example-1">Example</h5> <p><strong>Feature flags</strong> enable controlled releases, allowing gradual rollouts and easy rollback mechanisms. This enables A/B testing, risk mitigation, and data-driven decision-making.</p> </blockquote> <h3 id="pair-programming-and-peer-review">Pair programming and peer review</h3> <p>Pair programming or peer review not only reduces risk and improves code quality but also boosts collaboration and productivity. Although it may initially seem time-consuming, it leads to <strong>fewer errors, reduced rework, and enhanced knowledge sharing</strong> across teams.</p> <blockquote class="block-tip"> <h5 id="example-2">Example</h5> <p><strong>Trunk-based development</strong> encourages frequent integration, reducing long-lived branches and shifting the focus to continuous delivery of small, meaningful increments.</p> </blockquote> <h3 id="devops-and-shifting-left">DevOps and shifting left</h3> <p>DevOps has revolutionized software delivery by breaking down silos between development and operations. The <strong>shift-left</strong> approach, which integrates quality and security practices earlier in the development lifecycle, ensures that software is more reliable and secure from the start.</p> <blockquote class="block-tip"> <h5 id="example-3">Example</h5> <p><strong>Infrastructure as Code (IaC)</strong>, <strong>GitOps</strong>, <strong>containerization</strong>, <strong>cloud computing</strong>, and <strong>early security integration</strong> have enabled faster, more reliable, and secure software delivery. These technologies lower operational overhead and provide greater scalability, while also improving security and reducing costs.</p> </blockquote> <p>By adopting these practices, organizations can respond faster to market changes, deploy new features more safely, and scale their systems without incurring massive operational overhead.</p> <h3 id="observability">Observability</h3> <p>As software architectures grow more complex with microservices and distributed systems, <strong>observability</strong> has become crucial for managing system behavior. Observability provides <strong>real-time visibility</strong> into how systems operate, helping teams quickly detect, diagnose, and fix issues, which reduces downtime and improves overall system reliability.</p> <blockquote class="block-tip"> <h5 id="example-4">Example</h5> <p>Observability has evolved with the rise of cloud-native architectures, offering capabilities like <strong>distributed tracing</strong>, <strong>real-time analytics</strong>, and <strong>machine learning-driven anomaly detection</strong>.</p> </blockquote> <p>By integrating observability with other DevOps tools, teams gain a comprehensive view of their systems, enabling <strong>data-driven decisions</strong> and more proactive troubleshooting.</p> <h3 id="agile-methodologies">Agile methodologies</h3> <p>Agile methodologies have shifted software development towards <strong>rapid, iterative processes</strong> that prioritize flexibility and continuous improvement. This enables organizations to deliver value more efficiently and respond to changes quickly.</p> <blockquote class="block-tip"> <h5 id="example-5">Example</h5> <p>Techniques like <strong>vertical slicing</strong>, which break down features into small, end-to-end pieces, allow teams to deliver meaningful functionality in each increment. These slices can be independently tested and deployed, ensuring continuous value delivery.</p> </blockquote> <h3 id="domain-driven-design-ddd">Domain-driven design (DDD)</h3> <p>DDD emphasizes designing software around the business domain, helping create systems that mirror real-world processes and are adaptable to changes in business needs.</p> <blockquote class="block-tip"> <h5 id="example-6">Example</h5> <ul> <li><strong>Context mapping</strong> helps identify and analyze different bounded contexts within a system, allowing teams to manage complexity by isolating different parts of the system.</li> <li>The <strong>Inverse Conway Maneuver</strong> suggests aligning the organization’s structure with the architecture of the software to reduce friction between teams and system development.</li> </ul> </blockquote> <p>When combined, DDD practices create a more cohesive, efficient, and adaptable software development process. DDD ensures that software evolves in tandem with business needs, while cross-functional teams promote collaboration, further aligning development with business objectives.</p> <h3 id="conclusion">Conclusion</h3> <p>By embracing practices like Clean Code, CI/CD, DevOps, Observability, Agile, and DDD, organizations can create software systems that not only meet today’s requirements but can scale and evolve to meet the needs of tomorrow. These practices provide a foundation for building resilient, secure, and maintainable systems that continue to deliver value over time, helping organizations stay competitive and responsive in a fast-changing landscape.</p>]]></content><author><name></name></author><category term="core-values"/><summary type="html"><![CDATA[Building high-quality systems that last.]]></summary></entry></feed>